import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class CustomMaterialLocalizations extends DefaultMaterialLocalizations {
  const CustomMaterialLocalizations();

  static const CustomLocalizationsDelegate delegate =
      const CustomLocalizationsDelegate();

  static CustomMaterialLocalizations of(BuildContext context) =>
      Localizations.of<CustomMaterialLocalizations>(
          context, WidgetsLocalizations);

  @override
  String get searchFieldLabel => "Search by code";
}

class en extends CustomMaterialLocalizations {
  const en();
}

class it extends CustomMaterialLocalizations {
  const it();

  @override
  String get searchFieldLabel => "Cerca il codice";
}

class CustomLocalizationsDelegate
    extends LocalizationsDelegate<MaterialLocalizations> {
  const CustomLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      const Locale("en", ""),
      const Locale("it", ""),
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      final Locale languageLocale = new Locale(locale.languageCode, "");
      if (supported.contains(locale))
        return locale;
      else if (supported.contains(languageLocale))
        return languageLocale;
      else {
        final Locale fallbackLocale = fallback ?? supported.first;
        return fallbackLocale;
      }
    };
  }

  @override
  Future<MaterialLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    switch (lang) {
      case "en":
        return new SynchronousFuture<MaterialLocalizations>(const en());
      case "it":
        return new SynchronousFuture<MaterialLocalizations>(const it());

      default:
        return new SynchronousFuture<MaterialLocalizations>(
            const CustomMaterialLocalizations());
    }
  }

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  bool shouldReload(CustomLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
